name: CI - DevSecOps Eval

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  IMAGE_NAME: ${{ secrets.IMAGE_NAME }} # e.g. 123456789012.dkr.ecr.us-east-1.amazonaws.com/devsecops-eval
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install deps
        run: cd app && npm ci
      - name: Run unit tests (if any)
        run: |
          echo "No tests included by default"

  sonarcloud:
    runs-on: ubuntu-latest
    needs: lint-and-test
    steps:
      - uses: actions/checkout@v4
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  iac-scan:
    runs-on: ubuntu-latest
    needs: sonarcloud
    steps:
      - uses: actions/checkout@v4
      - name: Install tfsec
        run: |
          curl -sSL https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
      - name: Run tfsec
        run: tfsec ./terraform || true
      - name: Install checkov
        run: pip install checkov
      - name: Run checkov
        run: checkov -d ./terraform || true

  build-and-scan-image:
    runs-on: ubuntu-latest
    needs: [sonarcloud, iac-scan]
    steps:
      - uses: actions/checkout@v4
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry: ${{ env.IMAGE_NAME }}
      - name: Build image
        run: |
          cd app
          IMAGE_TAG=${{ github.sha }}
          docker build -t $IMAGE_TAG .
          docker tag $IMAGE_TAG ${IMAGE_NAME}:${IMAGE_TAG}
      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@v0.5.1
        with:
          image-ref: ${IMAGE_NAME}:${{ github.sha }}
          format: 'json'
          exit-code: '1'   # fail pipeline on critical issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Push to ECR (only if scan passed)
        run: |
          docker push ${IMAGE_NAME}:${{ github.sha }}

  deploy-manifests:
    runs-on: ubuntu-latest
    needs: build-and-scan-image
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
      - name: Configure kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}
      - name: Deploy manifests
        run: |
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/mongodb-deployment.yaml
          kubectl apply -f k8s/node-deployment.yaml
          kubectl apply -f k8s/service-mongo.yaml
          kubectl apply -f k8s/service-node.yaml
          kubectl apply -f k8s/ingress-alb.yaml
